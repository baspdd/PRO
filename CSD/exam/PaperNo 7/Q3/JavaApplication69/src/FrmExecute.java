
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author FPTU
 */
public class FrmExecute extends javax.swing.JFrame implements DocumentListener {

    /**
     * Creates new form CountAndCalculate
     */
    public FrmExecute() {
        initComponents();
        setTitle("Q3");
        txtn.getDocument().addDocumentListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ta2 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ta1 = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        txtn = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Input an integer number n and enter:");

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        ta2.setColumns(20);
        ta2.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        ta2.setRows(5);
        jScrollPane1.setViewportView(ta2);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Number ending in 3(<=n)");

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        ta1.setColumns(20);
        ta1.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        ta1.setRows(5);
        jScrollPane2.setViewportView(ta1);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Number ending in 7(<=n)");

        txtn.setFont(new java.awt.Font("Tahoma", 1, 21)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(txtn, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(39, 39, 39))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                        .addGap(32, 32, 32))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmExecute.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmExecute.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmExecute.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmExecute.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmExecute().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea ta1;
    private javax.swing.JTextArea ta2;
    private javax.swing.JTextField txtn;
    // End of variables declaration//GEN-END:variables

    @Override
    public void insertUpdate(DocumentEvent e) {
        if (!txtn.getText().isEmpty()) {
            Thread tk = new Thread(new Thread() {

                int number = 0;
                int number2 = 3;
                int count = 0;
                String result1 = "";

                public void run() {
                    try {
                        number = Integer.parseInt(txtn.getText());
                    } catch (Exception k) {
                        JOptionPane.showConfirmDialog(null, k.getMessage());
                    }
                    while (count < number) {
                        try {

                            Thread.sleep(1000);

                        } catch (InterruptedException ex) {
                            Logger.getLogger(FrmExecute.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        result1 += number2 + "\n";
                        ta1.setText(result1);
                        number2 = number2 + 10;
                        count += 10;

                    };

                }
            });
            Thread tk1 = new Thread(new Thread() {

                int number = 0;
                int number2 = 7;
                int count = 0;
                String result1 = "";

                public void run() {
                    try {
                        number = Integer.parseInt(txtn.getText());
                    } catch (Exception k) {
                        JOptionPane.showConfirmDialog(null, k.getMessage());
                    }
                    while (count < number) {
                        try {

                            Thread.sleep(1000);

                        } catch (InterruptedException ex) {
                            Logger.getLogger(FrmExecute.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        result1 += number2 + "\n";
                        ta2.setText(result1);
                        number2 = number2 + 10;
                        count += 10;

                    };

                }
            });
            tk1.start();
            tk.start();
        }
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        if (!txtn.getText().isEmpty()) {
            Thread tk = new Thread(new Thread() {

                int number = 0;
                int number2 = 3;
                int count = 0;
                String result1 = "";

                public void run() {
                    try {
                        number = Integer.parseInt(txtn.getText());
                    } catch (Exception k) {
                        JOptionPane.showConfirmDialog(null, k.getMessage());
                    }
                    while (count <= number) {
                        try {

                            Thread.sleep(1000);

                        } catch (InterruptedException ex) {
                            Logger.getLogger(FrmExecute.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        result1 += number2 + "\n";
                        ta1.setText(result1);
                        number2 = number2 + 10;
                        count += 10;

                    };

                }
            });
            Thread tk1 = new Thread(new Thread() {

                int number = 0;
                int number2 = 7;
                int count = 0;
                String result1 = "";

                public void run() {
                    try {
                        number = Integer.parseInt(txtn.getText());
                    } catch (Exception k) {
                        JOptionPane.showConfirmDialog(null, k.getMessage());
                    }
                    while (count <= number) {
                        try {

                            Thread.sleep(1000);

                        } catch (InterruptedException ex) {
                            Logger.getLogger(FrmExecute.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        result1 += number2 + "\n";
                        ta2.setText(result1);
                        number2 = number2 + 10;
                        count += 10;

                    };

                }
            });
            tk1.start();
            tk.start();
        }
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        if (!txtn.getText().isEmpty()) {
            Thread tk = new Thread(new Thread() {

                int number = 0;
                int number2 = 3;
                int count = 0;
                String result1 = "";

                public void run() {
                    try {
                        number = Integer.parseInt(txtn.getText());
                    } catch (Exception k) {
                        JOptionPane.showConfirmDialog(null, k.getMessage());
                    }
                    while (count <= number) {
                        try {

                            Thread.sleep(1000);

                        } catch (InterruptedException ex) {
                            Logger.getLogger(FrmExecute.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        result1 += number2 + "\n";
                        ta1.setText(result1);
                        number2 = number2 + 10;
                        count += 10;

                    };

                }
            });
            Thread tk1 = new Thread(new Thread() {

                int number = 0;
                int number2 = 7;
                int count = 0;
                String result1 = "";

                public void run() {
                    try {
                        number = Integer.parseInt(txtn.getText());
                    } catch (Exception k) {
                        JOptionPane.showConfirmDialog(null, k.getMessage());
                    }
                    while (count < number) {
                        try {

                            Thread.sleep(1000);

                        } catch (InterruptedException ex) {
                            Logger.getLogger(FrmExecute.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        result1 += number2 + "\n";
                        ta2.setText(result1);
                        number2 = number2 + 10;
                        count += 10;

                    };

                }
            });
            tk1.start();
            tk.start();
        }
    }
}
